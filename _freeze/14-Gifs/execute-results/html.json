{
  "hash": "69e5365ddabf65f2c3cd8b21cfb00157",
  "result": {
    "engine": "knitr",
    "markdown": "---\nauthor: \n  - Matthew J. C. Crump\naliases: [gifs.html]\n---\n\n\n\n\n\n\n# GIFs\n\nThis is the place where I put the stats gifs as I make them. The gifs can downloaded from this page, or they can be downloaded from this folder on the github repo for this book <https://github.com/CrumpLab/statistics/tree/master/gifs>. Please feel free to use them however you wish. The source code for compiling the gifs in R is shown alongside each gif. The animations are made possible by the **gganimate** package.\n\n**This is a work in progress, subject to change and addition**\n\n\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\n## Correlation GIFs\n\nNote regression lines and confidence bands can be added using `geom_smooth(method=lm, se=T)`\n\n### N=10, both variables drawn from a uniform distribution\n\n::: {.content-visible when-format=\"html\"}\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](imgs/gifs/corUnifn10-1.gif)\n:::\n:::\n\n\n\n\n\n:::\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nall_df<-data.frame()\nfor(sim in 1:10){\n  North_pole <- runif(10,1,10)\n  South_pole <- runif(10,1,10)\n  t_df<-data.frame(simulation=rep(sim,10),\n                                  North_pole,\n                                  South_pole)\n  all_df<-rbind(all_df,t_df)\n}\n\n\nggplot(all_df,aes(x=North_pole,y=South_pole))+\n  geom_point()+\n  geom_smooth(method=lm, se=FALSE)+\n  theme_classic()+\n  transition_states(\n    simulation,\n    transition_length = 2,\n    state_length = 1\n  )+enter_fade() + \n  exit_shrink() +\n  ease_aes('sine-in-out')\n```\n:::\n\n\n\n\n\n\n### Correlation between random deviates from uniform distribution across four sample sizes\n\nN= 10,50,100,1000 All values sampled from a uniform distribution\n\n::: {.content-visible when-format=\"html\"}\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](imgs/gifs/corUnifFourNs-1.gif)\n:::\n:::\n\n\n\n\n\n:::\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nall_df<-data.frame()\nfor(sim in 1:10){\n  for(n in c(10,50,100,1000)){\n  North_pole <- runif(n,1,10)\n  South_pole <- runif(n,1,10)\n  t_df<-data.frame(nsize=rep(n,n),\n                   simulation=rep(sim,n),\n                                  North_pole,\n                                  South_pole)\n  all_df<-rbind(all_df,t_df)\n  }\n}\n\n\nggplot(all_df,aes(x=North_pole,y=South_pole))+\n  geom_point()+\n  geom_smooth(method=lm, se=FALSE)+\n  theme_classic()+\n  facet_wrap(~nsize)+\n  transition_states(\n    simulation,\n    transition_length = 2,\n    state_length = 1\n  )+enter_fade() + \n  exit_shrink() +\n  ease_aes('sine-in-out')\n```\n:::\n\n\n\n\n\n\n### Correlation between random deviates from normal distribution across four sample sizes\n\nN= 10,50,100,1000 All values sampled from the same normal distribution (mean=0, sd=1)\n\n::: {.content-visible when-format=\"html\"}\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](imgs/gifs/corNormFourNs-1.gif)\n:::\n:::\n\n\n\n\n\n:::\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nall_df<-data.frame()\nfor(sim in 1:10){\n  for(n in c(10,50,100,1000)){\n  North_pole <- rnorm(n,0,1)\n  South_pole <- rnorm(n,0,1)\n  t_df<-data.frame(nsize=rep(n,n),\n                   simulation=rep(sim,n),\n                                  North_pole,\n                                  South_pole)\n  all_df<-rbind(all_df,t_df)\n  }\n}\n\n\nggplot(all_df,aes(x=North_pole,y=South_pole))+\n  geom_point()+\n  geom_smooth(method=lm, se=FALSE)+\n  theme_classic()+\n  facet_wrap(~nsize)+\n  transition_states(\n    simulation,\n    transition_length = 2,\n    state_length = 1\n  )+enter_fade() + \n  exit_shrink() +\n  ease_aes('sine-in-out')\n```\n:::\n\n\n\n\n\n\n### Correlation between X and Y variables that have a true correlation as a function of sample-size\n\n::: {.content-visible when-format=\"html\"}\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](imgs/gifs/corRealgif-1.gif)\n:::\n:::\n\n\n\n\n\n:::\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(MASS)\nr<-.7\n\nproportional_permute<-function(x,prop){\n  indices<-seq(1:length(x))\n  s_indices<-sample(indices)\n  n_shuffle<-round(length(x)*prop)\n  switch<-sample(indices)\n  x[s_indices[1:n_shuffle]]<-x[switch[1:n_shuffle]]\n  return(x)\n}\n\nall_df<-data.frame()\nfor(sim in 1:10){\n  for(samples in c(10,50,100,1000)){\n    #data <- mvrnorm(n=samples, mu=c(0, 0), Sigma=matrix(c(1, r, r, 1), nrow=2), empirical=TRUE)\n    #North_pole <- data[, 1]  # standard normal (mu=0, sd=1)\n    #South_pole <- data[, 2] \n    \n    North_pole <- runif(samples,1,10)\n    South_pole <- proportional_permute(North_pole,.5)+runif(samples,-5,5)\n\n    t_df<-data.frame(nsize=rep(samples,samples),\n                   simulation=rep(sim,samples),\n                                  North_pole,\n                                  South_pole)\n  all_df<-rbind(all_df,t_df)\n  }\n}\n\nggplot(all_df,aes(x=North_pole,y=South_pole))+\n  geom_point()+\n  geom_smooth(method=lm, se=FALSE)+\n  theme_classic()+\n  facet_wrap(~nsize)+\n  transition_states(\n    simulation,\n    transition_length = 2,\n    state_length = 1\n  )+enter_fade() + \n  exit_shrink() +\n  ease_aes('sine-in-out')\n```\n:::\n\n\n\n\n\n\n### Type I errors, sampling random deviates from normal distribution with regression lines\n\nThese scatter plots only show what would be type I errors (assuming alpha=.05). The X and Y values were both sampled from the same normal distribution (mean = 0, sd=1). 1000 simulations were conducted for each sample size (10,50,100,1000). For each, the animation shows 10 scatter plots where the observed \"correlation\" would have passed a significance test. According to definition, these correlations only arise from random normal deviates 5% of the time, but when they do arise for small sample sizes, they look fairly convincing.\n\n::: {.content-visible when-format=\"html\"}\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](imgs/gifs/corNormFourNsTypeI-1.gif)\n:::\n:::\n\n\n\n\n\n:::\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nall_df<-data.frame()\nfor(n in c(10,50,100,1000)){\n  count_sims<-0\n  for(sim in 1:1000){\n    North_pole <- rnorm(n,0,1)\n    South_pole <- rnorm(n,0,1)\n    if(cor.test(North_pole,South_pole)$p.value<.05){\n      count_sims<-count_sims+1\n    t_df<-data.frame(nsize=rep(n,n),\n                     simulation=rep(count_sims,n),\n                     North_pole,\n                     South_pole)\n    all_df<-rbind(all_df,t_df)\n    \n    if(count_sims==10){\n      break\n    }\n    }\n  }\n}\n\n\nggplot(all_df,aes(x=North_pole,y=South_pole))+\n  geom_point()+\n  geom_smooth(method=lm, se=TRUE)+\n  theme_classic()+\n  facet_wrap(~nsize)+\n  transition_states(\n    simulation,\n    transition_length = 2,\n    state_length = 1\n  )+enter_fade() + \n  exit_shrink() +\n  ease_aes('sine-in-out')\n```\n:::\n\n\n\n\n\n\n### Cell-size and correlation\n\nThis simulation illustrates how the behavior of correlating two random normal samples as a function of cell-size. The sample-size is always set at N=10. For each panel, the simulation uses an increasing cell-size to estimate the mean for X and Y. When cell-size is 1, 10 X and Y values are drawn from the same normal (u=0, sd=1). When cell-size is 5, for each X,Y score in the plot, 5 samples were drawn from the same normal, and then the mean of the samples is plotted. The effect of cell-size shrinks the dot cloud, as both X and Y scores provide better estimates of the population mean = 0. Cell-size has no effect on the behavior of r, which swings around because sample-size N is small. These are all random, so there is always a 5% type I error rate (alpha =.05).\n\n::: {.content-visible when-format=\"html\"}\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](imgs/gifs/cellsizeCor-1.gif)\n:::\n:::\n\n\n\n\n\n:::\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_sampling_means<-function(m,sd,cell_size,s_size){\n  save_means<-length(s_size)\n  for(i in 1:s_size){\n    save_means[i]<-mean(rnorm(cell_size,m,sd))\n  }\n  return(save_means)\n}\n\nall_df<-data.frame()\nfor(n in c(1,5,10,100)){\n  count_sims<-0\n  for(sim in 1:10){\n    North_pole <- get_sampling_means(0,1,n,10)\n    South_pole <- get_sampling_means(0,1,n,10)\n      count_sims<-count_sims+1\n      t_df<-data.frame(nsize=rep(n,10),\n                       simulation=rep(count_sims,10),\n                       North_pole,\n                       South_pole)\n      all_df<-rbind(all_df,t_df)\n  }\n}\n\n\nggplot(all_df,aes(x=North_pole,y=South_pole))+\n  geom_point()+\n  geom_smooth(method=lm, se=TRUE)+\n  theme_classic()+\n  facet_wrap(~nsize)+\n  ggtitle(\"Random scatterplots, N=10, Cell-size = 1,5,10,100\")+\n  transition_states(\n    simulation,\n    transition_length = 2,\n    state_length = 1\n  )+enter_fade() + \n  exit_shrink() +\n  ease_aes('sine-in-out')\n```\n:::\n\n\n\n\n\n\n### Regression\n\nWe look at how the residuals (error from points to line) behave as the regression lines moves above and below it's true value. The total error associated with all of the red lines is represents by the grey area. This total error is smallest (minimized) when the black line overlaps with the blue regression line (the best fit line). The total error expands as the black line moves away from the regression. That's why the regression line is the least wrong (best fit) line to skewer the data (according to least squares definition)\n\n::: {.content-visible when-format=\"html\"}\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](imgs/gifs/regression-1.gif)\n:::\n:::\n\n\n\n\n\n:::\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd <- mtcars\nfit <- lm(mpg ~ hp, data = d)\nd$predicted <- predict(fit)   # Save the predicted values\nd$residuals <- residuals(fit) # Save the residual values\n\ncoefs<-coef(lm(mpg ~ hp, data = mtcars))\ncoefs[1]\ncoefs[2]\n\nx<-d$hp\nmove_line<-c(seq(-6,6,.5),seq(6,-6,-.5))\ntotal_error<-length(length(move_line))\ncnt<-0\nfor(i in move_line){\n  cnt<-cnt+1\n  predicted_y <- coefs[2]*x + coefs[1]+i\n  error_y <- (predicted_y-d$mpg)^2\n  total_error[cnt]<-sqrt(sum(error_y)/32)\n}\n\nmove_line_sims<-rep(move_line,each=32)\ntotal_error_sims<-rep(total_error,each=32)\nsims<-rep(1:50,each=32)\n\nd<-d %>% slice(rep(row_number(), 50))\n\nd<-cbind(d,sims,move_line_sims,total_error_sims)\n\n\nanim<-ggplot(d, aes(x = hp, y = mpg, frame=sims)) +\n  geom_smooth(method = \"lm\", se = FALSE, color = \"lightblue\") +  \n  geom_abline(intercept = 30.09886+move_line_sims, slope = -0.06822828)+\n  lims(x = c(0,400), y = c(-10,40))+\n  geom_segment(aes(xend = hp, yend = predicted+move_line_sims, color=\"red\"), alpha = .5) + \n  geom_point() +\n  geom_ribbon(aes(ymin = predicted+move_line_sims - total_error_sims, ymax = predicted+move_line_sims + total_error_sims), fill = \"lightgrey\", alpha=.2)+ \n  theme_classic()+\n  theme(legend.position=\"none\")+\n  xlab(\"X\")+ylab(\"Y\")+\n  transition_manual(frames=sims)+\n  enter_fade() + \n  exit_fade()+\n  ease_aes('sine-in-out')\n\nanimate(anim,fps=5)\n```\n:::\n\n\n\n\n\n\n## Sampling distributions\n\n### Sampling from a uniform distribution\n\nAnimation shows histograms for N=20, sampled from a uniform distribution, along with mean (red line). Uniform distribution in this case is integer values from 1 to 10.\n\n::: {.content-visible when-format=\"html\"}\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](imgs/gifs/sampleHistUnif-1.gif)\n:::\n:::\n\n\n\n\n\n:::\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\na<-round(runif(20*10,1,10))\ndf<-data.frame(a,sample=rep(1:10,each=20))\ndf2<-aggregate(a~sample,df,mean)\ndf<-cbind(df,mean_loc=rep(df2$a,each=20))\n\nlibrary(gganimate)\n\nggplot(df,aes(x=a, group=sample,frame=sample)) +\n  geom_histogram() +\n  geom_vline(aes(xintercept=mean_loc,frame = sample),color=\"red\")+\n  scale_x_continuous(breaks=seq(1,10,1))+\n  theme_classic()+\n  transition_states(\n    sample,\n    transition_length = 2,\n    state_length = 1\n  )+enter_fade() + \n  exit_shrink() +\n  ease_aes('sine-in-out')\n```\n:::\n\n\n\n\n\n\n### Sampling from uniform with line showing expected value for each number\n\n::: {.content-visible when-format=\"html\"}\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](imgs/gifs/sampleUnifExpected-1.gif)\n:::\n:::\n\n\n\n\n\n:::\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\na<-round(runif(20*10,1,10))\ndf<-data.frame(a,sample=rep(1:10,each=20))\n\n\nlibrary(gganimate)\nggplot(df,aes(x=a))+\n  geom_histogram(bins=10, color=\"white\")+\n  theme_classic()+\n  scale_x_continuous(breaks=seq(1,10,1))+\n  geom_hline(yintercept=2)+\n  ggtitle(\"Small N=20 samples from a uniform distribution\")+\n  transition_states(\n    sample,\n    transition_length = 2,\n    state_length = 1\n  )+enter_fade() + \n  exit_shrink() +\n  ease_aes('sine-in-out')\n```\n:::\n\n\n\n\n\n\n### Sampling distribution of the mean, Normal population distribution and sample histograms\n\nThis animation illustrates the relationship between a distribution (population), samples from the distribution, and the sampling distribution of the sample means, all as a function of n\n\nNormal distribution in red. Individual sample histograms in grey. Vertical red line is mean of individual sample. Histograms for sampling distribution of the sample mean in blue. Vertical blue line is mean of the sampling distribution of the sample mean.\n\nNote: for purposes of the animation (and because it was easier to do this way), the histograms for the sampling distribution of the sample means have different sizes. When sample-size = 10, the histogram shows 10 sample means. When sample size=100, the histogram shows 100 sample means. I could have simulated many more sample means (say 10000) for each, but then the histograms for the sample means would be static.\n\nThe y-axis is very rough. The heights of the histograms and distributions were scaled to be in the same range for the animation.\n\n::: {.content-visible when-format=\"html\"}\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](imgs/gifs/sampleDistNormal-1.gif)\n:::\n:::\n\n\n\n\n\n:::\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_sampling_means<-function(m,sd,s_size){\n  save_means<-length(s_size)\n  for(i in 1:s_size){\n    save_means[i]<-mean(rnorm(s_size,m,sd))\n  }\n  return(save_means)\n}\n\nall_df<-data.frame()\nfor(sims in 1:10){\n  for(n in c(10,50,100,1000)){\n    sample<-rnorm(n,0,1)\n    sample_means<-get_sampling_means(0,1,n)\n    t_df<-data.frame(sims=rep(sims,n),\n                     sample,\n                     sample_means,\n                     sample_size=rep(n,n),\n                     sample_mean=rep(mean(sample),n),\n                     sampling_mean=rep(mean(sample_means),n)\n                     )\n    all_df<-rbind(all_df,t_df)\n  }\n}\n\n\nggplot(all_df, aes(x=sample))+\n  geom_histogram(aes(y=(..density..)/max(..density..)^.8),color=\"white\",fill=\"grey\")+\n  geom_histogram(aes(x=sample_means,y=(..density..)/max(..density..)),fill=\"blue\",color=\"white\",alpha=.5)+\n  stat_function(fun = dnorm, \n                args = list(mean = 0, sd = 1), \n                lwd = .75, \n                col = 'red')+\n  geom_vline(aes(xintercept=sample_mean,frame=sims),color=\"red\")+\n  geom_vline(aes(xintercept=sampling_mean,frame=sims),color=\"blue\")+\n  facet_wrap(~sample_size)+xlim(-3,3)+\n  theme_classic()+ggtitle(\"Population (red), Samples (grey), \\n and Sampling distribution of the mean (blue)\")+ylab(\"Rough likelihoods\")+\n  xlab(\"value\")+\n  transition_states(\n    sims,\n    transition_length = 2,\n    state_length = 1\n  )+enter_fade() + \n  exit_shrink() +\n  ease_aes('sine-in-out')\n```\n:::\n\n\n\n\n\n\n### Null and True effect samples and sampling means\n\nThe null dots show 50 different samples, with the red dot as the mean for each sample. Null dots are all sampled from normal (u=0, sd=1). The true dots show 50 more samples, with red dots for their means. However, the mean of the true shifts between -1.5 and +1.5 standard deviations of 0. This illustrates how a true effect moves in and out of the null range.\n\n::: {.content-visible when-format=\"html\"}\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](imgs/gifs/sampleNullTrue-1.gif)\n:::\n:::\n\n\n\n\n\n:::\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nall_df<-data.frame()\nall_df_means<-data.frame()\ndif_sim<-seq(-1.5,1.5,.25)\nfor(sim in 1:13){\n  values<-c(rnorm(25*25,0,1),rnorm(25*25,dif_sim[sim],1))\n  samples<-c(rep(seq(1:25),each=25),rep(seq(1:25),each=25))\n  df<-data.frame(samples,values,sims=rep(sim,50*25),type=rep(c(\"null\",\"true\"),each=625))\n  df_means<-aggregate(values~samples*type,df,mean, sims=rep(sim,50))\n  all_df<-rbind(all_df,df)\n  all_df_means<-rbind(all_df_means,df_means)\n}\n\nall_df<-cbind(all_df,means=rep(all_df_means$values,each=25))\n\nggplot(all_df,aes(y=values,x=samples))+\n  geom_point(aes(color=abs(values)), alpha=.25)+\n  geom_point(aes(y=means,x=samples),color=\"red\")+\n  theme_classic()+\n  geom_vline(xintercept=25.5)+\n  facet_wrap(~type)+\n  geom_hline(yintercept=0)+\n  theme(legend.position=\"none\") +\n  ggtitle(\"null=0, True effect moves from -1.5 sd to 1.5 sd\")+\n  transition_states(\n    sims,\n    transition_length = 2,\n    state_length = 1\n  )+enter_fade() + \n  exit_shrink() +\n  ease_aes('sine-in-out')\n```\n:::\n\n\n\n\n\n\n## Statistical Inference\n\n### Randomization Test\n\nThis is an attempt at visualizing a randomization test. Samples are taken under two conditions of the IV (A and B). At the beginning of the animation, the original scores in the first condition are shown as green dots on the left, and the original scores in the second condition are the red dots on the right. The means for each group are the purple dots. During the randomization, the original scores are shuffled randomly between the two conditions. After each shuffle, two new means are computed and displayed as the yellow dots. This occurs either for all permutations, or for a large random sample of them. The animation shows the original scores being shuffled around across the randomizations (the colored dots switch their original condition, appearing from side to side).\n\nFor intuitive inference, one might look at the range of motion of the yellow dots. This is how the mean difference between group 1 and group 2 behaves under randomization. It's what chance can do. If the difference between the purple dots is well outside the range of motion of the yellow dots, then the mean difference observed in the beginning is not likely produced by chance.\n\n::: {.content-visible when-format=\"html\"}\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](imgs/gifs/randomizationTest-1.gif)\n:::\n:::\n\n\n\n\n\n:::\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudy<-round(runif(10,80,100))\nno_study<-round(runif(10,40,90))\n\nstudy_df<-data.frame(student=seq(1:10),study,no_study)\nmean_original<-data.frame(IV=c(\"studied\",\"didnt_study\"),\n                          means=c(mean(study),mean(no_study)))\nt_df<-data.frame(sims=rep(1,20),\n                 IV=rep(c(\"studied\",\"didnt_study\"),each=10),\n                 values=c(study,no_study),\n                 rand_order=rep(c(0,1),each=10))\n\nraw_df<-t_df\nfor(i in 2:10){\n  new_index<-sample(1:20)\n  t_df$values<-t_df$values[new_index]\n  t_df$rand_order<-t_df$rand_order[new_index]\n  t_df$sims<-rep(i,20)\n  raw_df<-rbind(raw_df,t_df)\n}\n\nraw_df$rand_order<-as.factor(raw_df$rand_order)\nrand_df<-aggregate(values~sims*IV,raw_df,mean)\nnames(rand_df)<-c(\"sims\",\"IV\",\"means\")\n\n\na<-ggplot(raw_df,aes(x=IV,y=values,color=rand_order,size=3))+\n  geom_point(stat=\"identity\",alpha=.5)+\n  geom_point(data=mean_original,aes(x=IV,y=means),stat=\"identity\",shape=21,size=6,color=\"black\",fill=\"mediumorchid2\")+\n  geom_point(data=rand_df,aes(x=IV,y=means),stat=\"identity\",shape=21,size=6,color=\"black\",fill=\"gold\")+\n  theme_classic(base_size = 15)+\n  coord_cartesian(ylim=c(40, 100))+\n  theme(legend.position=\"none\") +\n  ggtitle(\"Randomization test: Original Means (purple), \n          \\n Randomized means (yellow)\n          \\n Original scores (red,greenish)\")+\n  transition_states(\n    sims,\n    transition_length = 1,\n    state_length = 2\n  )+enter_fade() + \n  exit_shrink() +\n  ease_aes('sine-in-out')\n\nanimate(a,nframes=100,fps=5)\n```\n:::\n\n\n\n\n\n\n### Independent t-test Null\n\nThis is a simulation of the null distribution for an independent samples t-test, two groups, 10 observations per group.\n\nThis animation has two panels. The left panel shows means for group A and B, sampled from the same normal distribution (mu=50, sd =10). The dots represent individual scores for each of 10 observations per group.\n\nThe right panel shows a t-distribution (df=18) along with the observed t-statistic for each simulation.\n\n`gganimate` does not yet directly support multiple panels as shown in this gif. I hacked together these two gifs using the `magick` package. Apologies for the hackiness.\n\n::: {.content-visible when-format=\"html\"}\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](imgs/gifs/indTtest.gif)\n:::\n:::\n\n\n\n\n\n:::\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(magick)\nlibrary(gganimate)\n\nA<-rnorm(100,50,10)\nB<-rnorm(100,50,10)\nDV <- c(A,B)\nIV <- rep(c(\"A\",\"B\"),each=100)\nsims <- rep(rep(1:10,each=10),2)\ndf<-data.frame(sims,IV,DV)\n\nmeans_df <- df %>%\n               group_by(sims,IV) %>%\n               summarize(means=mean(DV),\n                         sem = sd(DV)/sqrt(length(DV)))\n\nstats_df <- df %>%\n              group_by(sims) %>%\n              summarize(ts = t.test(DV~IV,var.equal=TRUE)$statistic)\n\na<-ggplot(means_df, aes(x=IV,y=means, fill=IV))+\n  geom_bar(stat=\"identity\")+\n  geom_point(data=df,aes(x=IV, y=DV), alpha=.25)+\n  geom_errorbar(aes(ymin=means-sem, ymax=means+sem),width=.2)+\n  theme_classic()+\n  transition_states(\n    states=sims,\n    transition_length = 2,\n    state_length = 1\n  )+enter_fade() + \n  exit_shrink() +\n  ease_aes('sine-in-out')\n  \na_gif<-animate(a, width = 240, height = 240)\n\nb<-ggplot(stats_df,aes(x=ts))+\n  geom_vline(aes(xintercept=ts, frame=sims))+\n  geom_line(data=data.frame(x=seq(-5,5,.1),\n                            y=dt(seq(-5,5,.1),df=18)),\n            aes(x=x,y=y))+\n  theme_classic()+\n  ylab(\"density\")+\n  xlab(\"t value\")+\n  transition_states(\n    states=sims,\n    transition_length = 2,\n    state_length = 1\n  )+enter_fade() + \n  exit_shrink() +\n  ease_aes('sine-in-out')\n\nb_gif<-animate(b, width = 240, height = 240)\n\n\nd<-image_blank(240*2,240)\n\nthe_frame<-d\nfor(i in 2:100){\n  the_frame<-c(the_frame,d)\n}\n\na_mgif<-image_read(a_gif)\nb_mgif<-image_read(b_gif)\n\nnew_gif<-image_append(c(a_mgif[1], b_mgif[1]))\nfor(i in 2:100){\n  combined <- image_append(c(a_mgif[i], b_mgif[i]))\n  new_gif<-c(new_gif,combined)\n}\n\nnew_gif\n```\n:::\n\n\n\n\n\n\n### Independent t-test True\n\nThis is a simulation of an independent samples t-test, two groups, 10 observations per group, assuming a true difference of 2 standard deviations between groups\n\nThis animation has two panels. The left panel shows means for group A (normal, mu=50, sd=10) and B (normal, mu=70, sd=10). The dots represent individual scores for each of 10 observations per group.\n\nThe right panel shows a t-distribution (df=18) along with the observed t-statistic for each simulation.\n\n::: {.content-visible when-format=\"html\"}\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](imgs/gifs/indTtestTrue.gif)\n:::\n:::\n\n\n\n\n\n:::\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(magick)\nlibrary(gganimate)\n\nA<-rnorm(100,70,10)\nB<-rnorm(100,50,10)\nDV <- c(A,B)\nIV <- rep(c(\"A\",\"B\"),each=100)\nsims <- rep(rep(1:10,each=10),2)\ndf<-data.frame(sims,IV,DV)\n\nmeans_df <- df %>%\n               group_by(sims,IV) %>%\n               summarize(means=mean(DV),\n                         sem = sd(DV)/sqrt(length(DV)))\n\nstats_df <- df %>%\n              group_by(sims) %>%\n              summarize(ts = t.test(DV~IV,var.equal=TRUE)$statistic)\n\na<-ggplot(means_df, aes(x=IV,y=means, fill=IV))+\n  geom_bar(stat=\"identity\")+\n  geom_point(data=df,aes(x=IV, y=DV), alpha=.25)+\n  geom_errorbar(aes(ymin=means-sem, ymax=means+sem),width=.2)+\n  theme_classic()+\n  transition_states(\n    states=sims,\n    transition_length = 2,\n    state_length = 1\n  )+enter_fade() + \n  exit_shrink() +\n  ease_aes('sine-in-out')\n  \na_gif<-animate(a, width = 240, height = 240)\n\nb<-ggplot(stats_df,aes(x=ts))+\n  geom_vline(aes(xintercept=ts, frame=sims))+\n  geom_vline(xintercept=qt(c(.025, .975), df=18),color=\"green\")+\n  geom_line(data=data.frame(x=seq(-5,5,.1),\n                            y=dt(seq(-5,5,.1),df=18)),\n            aes(x=x,y=y))+\n  theme_classic()+\n  ylab(\"density\")+\n  xlab(\"t value\")+\n  transition_states(\n    states=sims,\n    transition_length = 2,\n    state_length = 1\n  )+enter_fade() + \n  exit_shrink() +\n  ease_aes('sine-in-out')\n\nb_gif<-animate(b, width = 240, height = 240)\n\n\nd<-image_blank(240*2,240)\n\nthe_frame<-d\nfor(i in 2:100){\n  the_frame<-c(the_frame,d)\n}\n\na_mgif<-image_read(a_gif)\nb_mgif<-image_read(b_gif)\n\nnew_gif<-image_append(c(a_mgif[1], b_mgif[1]))\nfor(i in 2:100){\n  combined <- image_append(c(a_mgif[i], b_mgif[i]))\n  new_gif<-c(new_gif,combined)\n}\n\nnew_gif\n```\n:::\n\n\n\n\n\n\n### T-test True sample-size\n\nThe top row shows 10 simulations of an independent sample t-test, with N=10, and true difference of 1 sd.\n\nThe bottom row shows 10 simulations with N=50.\n\nThe observed t-value occurs past the critical value (green) line much more reliably and often when sample size is larger than smaller.\n\n::: {.content-visible when-format=\"html\"}\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](imgs/gifs/indTtestN.gif)\n:::\n:::\n\n\n\n\n\n:::\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(magick)\nlibrary(gganimate)\n\nA<-rnorm(100,60,10)\nB<-rnorm(100,50,10)\nDV <- c(A,B)\nIV <- rep(c(\"A\",\"B\"),each=100)\nsims <- rep(rep(1:10,each=10),2)\ndf<-data.frame(sims,IV,DV)\n\nmeans_df <- df %>%\n               group_by(sims,IV) %>%\n               summarize(means=mean(DV),\n                         sem = sd(DV)/sqrt(length(DV)))\n\nstats_df <- df %>%\n              group_by(sims) %>%\n              summarize(ts = t.test(DV~IV,var.equal=TRUE)$statistic)\n\na<-ggplot(means_df, aes(x=IV,y=means, fill=IV))+\n  geom_bar(stat=\"identity\")+\n  geom_point(data=df,aes(x=IV, y=DV), alpha=.25)+\n  geom_errorbar(aes(ymin=means-sem, ymax=means+sem),width=.2)+\n  theme_classic()+\n  transition_states(\n    states=sims,\n    transition_length = 2,\n    state_length = 1\n  )+enter_fade() + \n  exit_shrink() +\n  ease_aes('sine-in-out')\n  \na_gif<-animate(a, width = 240, height = 240)\n\nb<-ggplot(stats_df,aes(x=ts))+\n  geom_vline(aes(xintercept=ts, frame=sims))+\n  geom_vline(xintercept=qt(c(.025, .975), df=18),color=\"green\")+\n  geom_line(data=data.frame(x=seq(-5,5,.1),\n                            y=dt(seq(-5,5,.1),df=18)),\n            aes(x=x,y=y))+\n  theme_classic()+\n  ylab(\"density\")+\n  xlab(\"t value\")+\n  transition_states(\n    states=sims,\n    transition_length = 2,\n    state_length = 1\n  )+enter_fade() + \n  exit_shrink() +\n  ease_aes('sine-in-out')\n\nb_gif<-animate(b, width = 240, height = 240)\n\n\nd<-image_blank(240*2,240)\n\nthe_frame<-d\nfor(i in 2:100){\n  the_frame<-c(the_frame,d)\n}\n\na_mgif<-image_read(a_gif)\nb_mgif<-image_read(b_gif)\n\nnew_gif<-image_append(c(a_mgif[1], b_mgif[1]))\nfor(i in 2:100){\n  combined <- image_append(c(a_mgif[i], b_mgif[i]))\n  new_gif<-c(new_gif,combined)\n}\n\nnew_gif\n\n## increase sample-size\n\nA<-rnorm(50*10,60,10)\nB<-rnorm(50*10,50,10)\nDV <- c(A,B)\nIV <- rep(c(\"A\",\"B\"),each=50*10)\nsims <- rep(rep(1:10,each=50),2)\ndf<-data.frame(sims,IV,DV)\n\nmeans_df <- df %>%\n               group_by(sims,IV) %>%\n               summarize(means=mean(DV),\n                         sem = sd(DV)/sqrt(length(DV)))\n\nstats_df <- df %>%\n              group_by(sims) %>%\n              summarize(ts = t.test(DV~IV,var.equal=TRUE)$statistic)\n\na<-ggplot(means_df, aes(x=IV,y=means, fill=IV))+\n  geom_bar(stat=\"identity\")+\n  geom_point(data=df,aes(x=IV, y=DV), alpha=.25)+\n  geom_errorbar(aes(ymin=means-sem, ymax=means+sem),width=.2)+\n  theme_classic()+\n  transition_states(\n    states=sims,\n    transition_length = 2,\n    state_length = 1\n  )+enter_fade() + \n  exit_shrink() +\n  ease_aes('sine-in-out')\n  \na_gif<-animate(a, width = 240, height = 240)\n\nb<-ggplot(stats_df,aes(x=ts))+\n  geom_vline(aes(xintercept=ts, frame=sims))+\n  geom_vline(xintercept=qt(c(.025, .975), df=98),color=\"green\")+\n  geom_line(data=data.frame(x=seq(-5,5,.1),\n                            y=dt(seq(-5,5,.1),df=98)),\n            aes(x=x,y=y))+\n  theme_classic()+\n  ylab(\"density\")+\n  xlab(\"t value\")+\n  transition_states(\n    states=sims,\n    transition_length = 2,\n    state_length = 1\n  )+enter_fade() + \n  exit_shrink() +\n  ease_aes('sine-in-out')\n\nb_gif<-animate(b, width = 240, height = 240)\n\n\nd<-image_blank(240*2,240)\n\nthe_frame<-d\nfor(i in 2:100){\n  the_frame<-c(the_frame,d)\n}\n\na_mgif<-image_read(a_gif)\nb_mgif<-image_read(b_gif)\n\nnew_gif2<-image_append(c(a_mgif[1], b_mgif[1]))\nfor(i in 2:100){\n  combined <- image_append(c(a_mgif[i], b_mgif[i]))\n  new_gif2<-c(new_gif2,combined)\n}\n\n## add new row\n\nfinal_gif <- image_append(c(new_gif[1], new_gif2[1]),stack=TRUE)\nfor(i in 2:100){\n  combined <- image_append(c(new_gif[i], new_gif2[i]),stack=TRUE)\n  final_gif<-c(final_gif,combined)\n}\n\nfinal_gif\n```\n:::\n\n\n\n\n\n\n### one-factor ANOVA Null\n\nThree groups, N=10, all observations sampled from same normal distribution (mu=50, sd = 10)\n\n::: {.content-visible when-format=\"html\"}\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](imgs/gifs/OneWayNull.gif)\n:::\n:::\n\n\n\n\n\n:::\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(magick)\nlibrary(gganimate)\n\n\nA<-rnorm(100,50,10)\nB<-rnorm(100,50,10)\nC<-rnorm(100,50,10)\nDV <- c(A,B,C)\nIV <- rep(rep(c(\"A\",\"B\",\"C\"),each=10),10)\nsims <- rep(1:10,each=30)\ndf<-data.frame(sims,IV,DV)\n\nmeans_df <- df %>%\n  group_by(sims,IV) %>%\n  summarize(means=mean(DV),\n            sem = sd(DV)/sqrt(length(DV)))\n\nstats_df <- df %>%\n  group_by(sims) %>%\n  summarize(Fs = summary(aov(DV~IV))[[1]][[4]][1])\n\na<-ggplot(means_df, aes(x=IV,y=means, fill=IV))+\n  geom_bar(stat=\"identity\")+\n  geom_point(data=df,aes(x=IV, y=DV), alpha=.25)+\n  geom_errorbar(aes(ymin=means-sem, ymax=means+sem),width=.2)+\n  theme_classic(base_size = 20)+\n  transition_states(\n    states=sims,\n    transition_length = 2,\n    state_length = 1\n  )+enter_fade() + \n  exit_shrink() +\n  ease_aes('sine-in-out')\n\nb<-ggplot(stats_df,aes(x=Fs))+\n  geom_vline(aes(xintercept=Fs))+\n  geom_vline(xintercept=qf(.95, df1=2,df2=27),color=\"green\")+\n  geom_line(data=data.frame(x=seq(0,6,.1),\n                            y=df(seq(0,6,.1),df1=2,df2=27)),\n            aes(x=x,y=y))+\n  theme_classic(base_size = 20)+\n  ylab(\"density\")+\n  xlab(\"F value\")+\n  transition_states(\n    states=sims,\n    transition_length = 2,\n    state_length = 1\n  )+enter_fade() + \n  exit_shrink() +\n  ease_aes('sine-in-out')\n\na_gif<-animate(a,width=480,height=480)\nb_gif<-animate(b,width=480,height=480)\n\na_mgif<-image_read(a_gif)\nb_mgif<-image_read(b_gif)\n\nnew_gif<-image_append(c(a_mgif[1], b_mgif[1]))\nfor(i in 2:100){\n  combined <- image_append(c(a_mgif[i], b_mgif[i]))\n  new_gif<-c(new_gif,combined)\n}\n\nnew_gif\n```\n:::\n\n\n\n\n\n\n### Factorial Null\n\n10 simulations, N=10 in each of 4 conditions in a 2x2 (between-subjects). All observations taken from the same normal distribution (mu=50, sd =10).\n\n::: {.content-visible when-format=\"html\"}\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](imgs/gifs/FactorialNull.gif)\n:::\n:::\n\n\n\n\n\n:::\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nA<-rnorm(100,50,10)\nB<-rnorm(100,50,10)\nC<-rnorm(100,50,10)\nD<-rnorm(100,50,10)\nDV <- c(A,B,C,D)\nIV1 <- rep(c(\"A\",\"B\"),each=200)\nIV2<-rep(rep(c(\"1\",\"2\"),each=100),2)\nsims <- rep(1:10,40)\ndf<-data.frame(sims,IV1,IV2,DV)\n\nmeans_df <- df %>%\n  group_by(sims,IV1,IV2) %>%\n  summarize(means=mean(DV),\n            sem = sd(DV)/sqrt(length(DV)))\n\nstats_df <- df %>%\n  group_by(sims) %>%\n  summarize(FIV1 = summary(aov(DV~IV1*IV2))[[1]][[4]][1],\n            FIV2 = summary(aov(DV~IV1*IV2))[[1]][[4]][2],\n            F1x2 = summary(aov(DV~IV1*IV2))[[1]][[4]][3]\n            )\n\na<-ggplot(means_df, aes(x=IV1,y=means, \n                                           group=IV2,\n                                           color=IV2))+\n  geom_point(data=df,aes(x=IV1, y=DV,group=IV2), \n             position=position_dodge(width=.2),\n             size=2,\n             alpha=.25)+\n  geom_point(size=4)+\n  geom_line(size=1.3)+\n  geom_errorbar(aes(ymin=means-sem, ymax=means+sem),width=.2,\n                color=\"black\")+\n  theme_classic(base_size = 20)+\n  transition_states(\n    states=sims,\n    transition_length = 2,\n    state_length = 1\n  )+enter_fade() + \n  exit_shrink() +\n  ease_aes('sine-in-out')\n\nb<-ggplot(stats_df,aes(x=FIV1))+\n  geom_vline(aes(xintercept=FIV1),color=\"red\",size=1.2)+\n  geom_vline(aes(xintercept=FIV2),color=\"blue\",size=1.2)+\n  geom_vline(aes(xintercept=F1x2),color=\"purple\",size=1.2)+\n  geom_vline(xintercept=qf(.95, df1=1,df2=36),color=\"green\",size=1.2)+\n  geom_line(data=data.frame(x=seq(0,20,.1),\n                            y=df(seq(0,20,.1),df1=1,df2=36)),\n            aes(x=x,y=y))+\n  theme_classic(base_size = 20)+\n  ylab(\"density\")+\n  xlab(\"F value\")+\n  ggtitle(label=\"\",subtitle=\"red=IV1, blue=IV2, \\n purple=Interaction\")+\n  transition_states(\n    states=sims,\n    transition_length = 2,\n    state_length = 1\n  )\n\na_gif<-animate(a,width=480,height=480)\nb_gif<-animate(b,width=480,height=480)\n\na_mgif<-image_read(a_gif)\nb_mgif<-image_read(b_gif)\n\nnew_gif<-image_append(c(a_mgif[1], b_mgif[1]))\nfor(i in 2:100){\n  combined <- image_append(c(a_mgif[i], b_mgif[i]))\n  new_gif<-c(new_gif,combined)\n}\n\nimage_animate(new_gif, fps = 10,dispose=\"none\")\n```\n:::\n\n\n\n\n\n\n## Distributions\n\n### Normal changing mean\n\n::: {.content-visible when-format=\"html\"}\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](imgs/gifs/normalMovingMean-1.gif)\n:::\n:::\n\n\n\n\n\n:::\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsome_means<-c(0,1,2,3,4,5,4,3,2,1)\nall_df<-data.frame()\nfor(i in 1:10){\n  dnorm_vec <- dnorm(seq(-10,10,.1),mean=some_means[i],sd=1)\n  x_range   <- seq(-10,10,.1)\n  means <- rep(some_means[i], length(x_range))\n  sims <- rep(i, length(x_range))\n  t_df<-data.frame(sims,means,x_range,dnorm_vec)\n  all_df<-rbind(all_df,t_df)\n}\n\nggplot(all_df, aes(x=x_range,y=dnorm_vec))+\n  geom_line()+\n  theme_classic()+\n  ylab(\"probability density\")+\n  xlab(\"value\")+\n  ggtitle(\"Normal Distribution with changing Mean\")+\n   transition_states(\n    sims,\n    transition_length = 1,\n    state_length = 1\n  )\n  #enter_fade() + \n  #exit_shrink() +\n  #ease_aes('sine-in-out')\n```\n:::\n\n\n\n\n\n\n### Normal changing sd\n\n::: {.content-visible when-format=\"html\"}\n\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](imgs/gifs/normalMovingSD-1.gif)\n:::\n:::\n\n\n\n\n\n:::\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsome_sds<-seq(0.5,5,.5)\nall_df<-data.frame()\nfor(i in 1:10){\n  dnorm_vec <- dnorm(seq(-10,10,.1),mean=0,sd=some_sds[i])\n  x_range   <- seq(-10,10,.1)\n  sds <- rep(some_sds[i], length(x_range))\n  sims <- rep(i, length(x_range))\n  t_df<-data.frame(sims,sds,x_range,dnorm_vec)\n  all_df<-rbind(all_df,t_df)\n}\n\nlabs_df<-data.frame(sims=1:10,\n                    sds=as.character(seq(0.5,5,.5)))\n\nggplot(all_df, aes(x=x_range,y=dnorm_vec, frame=sims))+\n  geom_line()+\n  theme_classic()+\n  ylab(\"probability density\")+\n  xlab(\"value\")+\n  ggtitle(\"Normal Distribution with changing sd\")+\n  geom_label(data = labs_df, aes(x = 5, y = .5, label = sds))+\n   transition_states(\n    sims,\n    transition_length = 2,\n    state_length = 1\n  )+\n  enter_fade() + \n  exit_shrink() +\n  ease_aes('sine-in-out')\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}